//
// Copyright (c) 2017 Cavium
//
// SPDX-License-Identifier: Apache-2.0
//

package internal

import (
	"github.com/edgexfoundry/nsplussdk/sdk/correlation/models"
	contract "github.com/edgexfoundry/go-mod-core-contracts/models"
	"github.com/google/uuid"
)

func validRegistration() contract.Registration {
	r := contract.Registration{}
	r.Addressable = contract.Addressable{Id: uuid.New().String(), Name: "Test Addressable"}
	r.Format = contract.FormatJSON
	r.Compression = contract.CompNone
	r.Destination = contract.DestMQTT
	r.Encryption.Algo = contract.EncNone
	r.Filter.DeviceIDs = append(r.Filter.DeviceIDs, "dummy1")
	r.Filter.ValueDescriptorIDs = append(r.Filter.DeviceIDs, "dummy1")
	return r
}


type dummyStruct struct {
	count    int
	lastSize int
}

func (sender *dummyStruct) Send(data []byte, event *models.Event) bool {
	sender.count += 1
	sender.lastSize = len(data)

	return true
}
func (sender *dummyStruct) Recv(topic string) bool {
	sender.count += 1
	sender.lastSize = len(topic)

	return true
}
func (sender *dummyStruct) Format(ev *contract.Event) []byte {
	return []byte("")
}

func (sender *dummyStruct) Transform(data []byte) []byte {
	return data
}

